/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
// $Header: /cvs/ADFToyStoreJSF/ToyStoreModel/src/toystore/model/dataaccess/AccountsImpl.java,v 1.1.1.1 2006/01/26 21:47:21 steve Exp $
package toystore.model.dataaccess;
// ---------------------------------------------------------------
// ---    File generated by Oracle Business Components for Java.
// ---------------------------------------------------------------
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
public class AccountsImpl extends ViewObjectImpl {
  /**
   * This is the default constructor (do not remove)
   */
  public AccountsImpl() {
  }

  //--[Begin Custom Code]--
  /*
   * Accounts view is a join involving two updateable EO's so its VO row
   * primary key is the union of the underlying EO primary keys. Since
   * the underlying "Signon" EO and the underlying "Account" both use
   * the same value as their primary key (the userid), we'll override
   * the base framework findByKey method here to allow the client to
   * pass in a key with just a single userid value. Then, we'll double
   * it up for them transparently by constructing a new Key() with the
   * same value repeated twice, once for the Signon.Username attribute
   * and once for the Account.Userid attribute.
   */
  public Row[] findByKey(Key key, int maxNumOfRows) {
    // Allow the client to pass in a key with just a single value
    Key keyWithUsernameRepeated = new Key(new Object[] {
          key.getKeyValues()[0], key.getKeyValues()[0]
        });
    return super.findByKey(keyWithUsernameRepeated, maxNumOfRows);
  }
  /**
   * Find an account by username and password, leaving the account
   * as the current row in the rowset if found.
   *
   * @param username the username
   * @param password the user's password
   * @return whether the user account exists or not
   */
  public boolean findAccountByUsernamePassword(String username, String password) {
    /*
     * We're expecting either zero or 1 row here, so indicate that
     * by setting the max fetch size to 1.
     */
    setMaxFetchSize(1);
    setWhereClause("username = :0 and password = :1");
    setWhereClauseParam(0, username);
    setWhereClauseParam(1, password);
    executeQuery();
    boolean found = first() != null;
    setWhereClause(null);
    setWhereClauseParams(null);
    setMaxFetchSize(0);
    return found;
  }
  /**
   * Find an account by username only. This method is used by the appliation
   * only when the user has already authenticated and we need to reinstate
   * the current user's account information after a stateless application
   * module release (when an order is finalized).
   *
   * @param username the username
   * @return whether the user account exists or not
   */
  public boolean findAuthenticatedAccountByUsername(String username) {
    boolean found = false;
    Row[] usersFound = findByKey(new Key(new Object[]{username}),1);
    if (usersFound != null && usersFound.length > 0) {
      found = true;
      setCurrentRow(usersFound[0]);
    }
    return found;
  }  
  //--[End Custom Code]--
}
