/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
// $Header: /cvs/ADFToyStoreJSF/ToyStoreModel/src/toystore/model/dataaccess/ShoppingCartImpl.java,v 1.1.1.1 2006/01/26 21:47:21 steve Exp $
package toystore.model.dataaccess;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowSetImpl;

import toystore.fwk.model.service.ToyStoreApplicationModuleImpl;
import toystore.model.businessobjects.ItemImpl;
import toystore.model.dataaccess.common.ShoppingCartRow;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------
public class ShoppingCartImpl extends ViewObjectImpl
  implements toystore.model.dataaccess.common.ShoppingCart {
  private static final String LOOKUPCONFIGPROP = "toystore.shoppingcartlookup";
  /**
   * This is the default constructor (do not remove)
   */
  public ShoppingCartImpl() {
  }

  //--[Begin Custom Code]-- 
  /**
   * Overridden framework method
   *
   * Enable management of transient rows by key so findByKey() works for them
   */
  protected void create() {
    super.create();
    setManageRowsByKey(true);
  }
  /**
   * Returns the total cost of all items in the cart
   */
  public double cartTotal() {
    double total = 0;
    RowSetIterator cartItems = createRowSetIterator(null);
    /*
     * Reset the default iterator on the default rowset for this view object
     */
    while (cartItems.hasNext()) {
      ShoppingCartRowImpl curItem = (ShoppingCartRowImpl) cartItems.next();
      total += curItem.getExtendedTotal().doubleValue();
    }
    cartItems.closeRowSetIterator();
    return total;
  }
  /**
   * Adjust the quantity of a given item in the shopping cart.
   * Passing in a quantity of zero removes the item from the cart.
   *
   * @param itemid The item's id
   * @param qty The new quantity value
   */
   /*
    * TODO: rationalize the removal of cart item with notifiyRowUpdated
    *       
    */
  public void adjustQuantityInCart(String itemid, long qty) {
    ShoppingCartRowImpl cartItem = findCartItem(itemid);
    if (cartItem == null) {
      if (qty == 0) {
        return;
      } else {
        cartItem = (ShoppingCartRowImpl) createRow();
        last();
        /*
         * Important to set key attribute before adding the row to rowset
         */
        cartItem.setItemid(itemid);
        insertRow(cartItem);
        fillInCartItemDetails(cartItem);
      }
    } else {
      if (qty == 0) {
        cartItem.remove();
        return;
      }
    }
    /*
     * Set the quantity
     */
    cartItem.setQuantity(new Long(qty));
  }
  /**
   * Fill in the Name, Listprice, InStock, and ExtendedTotal Attributes
   *
   * This class contains two different implementations of this functionality
   * to show off different approaches:
   *
   *   fillInCartItemDetailsUsingViewObject()
   *
   *      Shows using a view object to execute a single SQL statement
   *      containing a join of the ITEM, PRODUCT, and INVENTORY tables
   *      to lookup all of the derived information we need in a single
   *      SQL statement.
   *
   *   fillInCartItemDetailsUsingEntityObject()
   *
   *      Shows finding the Item business object (entity object) by its
   *      primary key, and then using association accessor methods to
   *      "walk" to related business objects to pickup the information we
   *      need for part of the item's name and the quantity on hand in
   *      inventory information.
   *
   *  to try out the Entity Object based approach, set the System parameter
   *  'toystore.shoppingcart.useEntityLookup' to any value on the Java VM
   *  command line with -Dtoystore.shoppingcart.useEntityLookup=yes
   */
  private void fillInCartItemDetails(ShoppingCartRowImpl cartItem) {
    if (useEntityObjectForShoppingCartLookup()) {
      fillInCartItemDetailsUsingEntityObject(cartItem);
    } else {
      fillInCartItemDetailsUsingViewObject(cartItem);
    }
  }
  /**
   * Fill in the Name, Listprice, InStock, and ExtendedTotal Attributes
   * using a view object to select all the relevant information in a single
   * database round trip using SQL
   */
  private void fillInCartItemDetailsUsingViewObject(
    ShoppingCartRowImpl cartItem) {
    /*
     * Find the lookup view object instance in the current application module
     */
    ViewObject lookup = getDBTransaction().getRootApplicationModule()
                          .findViewObject("ShoppingCartItemLookup");
    /*
     * Set value of the 0th bind variable in the VO's where clause to the itemid
     */
    lookup.setWhereClauseParam(0, cartItem.getItemid());
    /*
     * Execute the query and get the first (should be only) result row
     */
    lookup.executeQuery();
    ShoppingCartItemLookupRowImpl foundItem = (ShoppingCartItemLookupRowImpl) lookup.first();
    /*
     * If the itemid was found, set the values of the transient attributes
     * in the shopping cart item row using the values we found.
     */
    if (foundItem != null) {
      /*
       * The name of the item that the user sees is the concatentation
       * of the Item.Attr1 attribute value and the Product.Name value.
       * Here, we've done the concatentation as part of the view object's
       * query so the value is already what we want.
       */
      cartItem.setName(foundItem.getName());
      cartItem.setListprice(foundItem.getListprice());
      long qtyOnHand = foundItem.getQuantityOnHand().longValue();
      /*
       * Set the "InStock" value to either "Y" or "N". We'll decode this
       * value in the view layer using translatable resource message strings
       * named "cart.instock.Y" and "cart.instock.N" so that
       * the user will see a translated value appropriate to the current
       * language.
       */
      cartItem.setInStock((qtyOnHand > 0) ? "Y" : "N");
    }
  }
  /**
   * Fill in the Name, Listprice, InStock, and ExtendedTotal Attributes
   * by looking up the Item entity object, then using entity association
   * traversal to find the other necessary pieces of information.
   */
  private void fillInCartItemDetailsUsingEntityObject(
    ShoppingCartRowImpl cartItem) {
    /*
     * Get the home/factory object for the Item entity object
     */
    EntityDefImpl itemHome = ItemImpl.getDefinitionObject();
    /*
     * Find the Item business object by its primary key, using the itemid
     * in the shopping cart row as the primary key value.
     */
    ItemImpl item = (ItemImpl) itemHome.findByPrimaryKey(getDBTransaction(),
        ItemImpl.createPrimaryKey(cartItem.getItemid()));
    /*
     * If the itemid was found, set the values of the transient attributes
     * in the shopping cart item row using the entity (and associated entities)
     * that we found.
     */
    if (item != null) {
      /*
       * The name of the item that the user sees is the concatentation
       * of the Item.Attr1 attribute value and the Product.Name value.
       * So we do the concatentation here. Note that we're traversing
       * from the Item business object instance we found to its associated
       * Product business object instance using the getProduct() association
       * accessor method.
       */
      cartItem.setName(item.getAttr1() + " " + item.getProduct().getName());
      cartItem.setListprice(item.getListprice());
      /*
       * The quantity on hand in inventory information is managed by the
       * associatied Inventory business object, related to the Item business
       * object by an association. So, we get the quantity on hand by
       * using the getInventory() association accessor method to get the
       * related Inventory business object instance, then call its accessor
       * to getQty().
       */
      long qtyOnHand = item.getInventory().getQty().longValue();
      /*
       * Set the "InStock" value to either "Y" or "N". We'll decode this
       * value in the view layer using translatable resource message strings
       * named "cart.instock.Y" and "cart.instock.N" so that
       * the user will see a translated value appropriate to the current
       * language.
       */
      cartItem.setInStock((qtyOnHand > 0) ? "Y" : "N");
    }
  }
  /**
   * Returns true if there are no rows in the default rowset of this view object
   */
  public boolean isCartEmpty() {
    return getRowCount() == 0;
  }
  /**
   * Remove all items from the shopping cart by removing all rows
   * from the default rowset of this view object.
   */
  public void emptyCart() {
    clearCache();
  }
  /**
   * Return the current quantity in the cart of a given item
   */
  public long currentQuantityInCart(String itemid) {
    ShoppingCartRowImpl item = findCartItem(itemid);
    return (item != null) ? item.getQuantity().longValue() : 0;
  }
  /**
   * Find an item in the cart by its itemid
   */
  private ShoppingCartRowImpl findCartItem(String itemid) {
    Key k = new Key(new Object[] { itemid });
    Row[] itemsFound = findByKey(k, 1);
    return (itemsFound.length == 0) ? null : (ShoppingCartRowImpl) itemsFound[0];
  }
  /**
   * 
   * @return 
   */
  public boolean useEntityObjectForShoppingCartLookup() {
    ToyStoreApplicationModuleImpl am = 
      (ToyStoreApplicationModuleImpl)getApplicationModule();
    String val = am.getConfigurationProperty(LOOKUPCONFIGPROP);
    return val != null && val.equalsIgnoreCase("EntityObject");
  }  
  /*
   * Remove cart item if quantity updated to zero or negative number 
   */
  public void removeShoppingCartItemsWithZeroQuantity() {
    RowSetIterator rsi = createRowSetIterator(null);
    while (rsi.hasNext()) {
      ShoppingCartRowImpl item = (ShoppingCartRowImpl)rsi.next();
      if (item.getQuantity() == null || item.getQuantity().longValue() <=0 ) {
        item.remove();
      }
    }
    rsi.closeRowSetIterator();
  }
  //--[End Custom Code]-- 
}
