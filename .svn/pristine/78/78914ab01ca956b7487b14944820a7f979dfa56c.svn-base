/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package test.model;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.Key;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---------------------------------------------------------------------

public class DeptImpl extends EntityImpl {

    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Deptno {
            public Object get(DeptImpl obj) {
                return obj.getDeptno();
            }

            public void put(DeptImpl obj, Object value) {
                obj.setDeptno((Number)value);
            }
        }
        ,
        Dname {
            public Object get(DeptImpl obj) {
                return obj.getDname();
            }

            public void put(DeptImpl obj, Object value) {
                obj.setDname((String)value);
            }
        }
        ,
        Loc {
            public Object get(DeptImpl obj) {
                return obj.getLoc();
            }

            public void put(DeptImpl obj, Object value) {
                obj.setLoc((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DeptImpl object);

        public abstract void put(DeptImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DEPTNO = AttributesEnum.Deptno.index();
    public static final int DNAME = AttributesEnum.Dname.index();
    public static final int LOC = AttributesEnum.Loc.index();

    /**
     *
     *  This is the default constructor (do not remove)
     */
    public DeptImpl() {
  }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("test.model.Dept");
        }
        return mDefinitionObject;
    }

    /**
     *
     *  Gets the attribute value for Deptno, using the alias name Deptno
     */
    public Number getDeptno() {
    return (Number)getAttributeInternal(DEPTNO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Deptno
   */
  public void setDeptno(Number value) {
    setAttributeInternal(DEPTNO, value);
  }

  /**
   * 
   *  Gets the attribute value for Dname, using the alias name Dname
   */
  public String getDname() {
    return (String)getAttributeInternal(DNAME);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Dname
   */
  public void setDname(String value) {
    setAttributeInternal(DNAME, value);
  }

  /**
   * 
   *  Gets the attribute value for Loc, using the alias name Loc
   */
  public String getLoc() {
    return (String)getAttributeInternal(LOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Loc
   */
  public void setLoc(String value) {
    setAttributeInternal(LOC, value);
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param deptno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number deptno) {
        return new Key(new Object[]{deptno});
    }


}
