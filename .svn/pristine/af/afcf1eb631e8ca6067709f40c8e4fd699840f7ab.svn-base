/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package test.example;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.Key;

import test.fwkext.CustomEntityDefImpl;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---------------------------------------------------------------------

public class PersonImpl extends EntityImpl {
    public static final int ID = 0;
    public static final int NAME = 1;
    public static final int SEX = 2;


    private static test.fwkext.CustomEntityDefImpl mDefinitionObject;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public PersonImpl() {
  }


    /**Retrieves the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = 
                    (CustomEntityDefImpl)EntityDefImpl.findDefObject("test.example.Person");
        }
        return mDefinitionObject;
    }

    /**
     * 
     *  Gets the attribute value for Id, using the alias name Id
     */
    public Number getId() {
    return (Number)getAttributeInternal(ID);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Id
   */
  public void setId(Number value) {
    setAttributeInternal(ID, value);
  }

  /**
   * 
   *  Gets the attribute value for Name, using the alias name Name
   */
  public String getName() {
    return (String)getAttributeInternal(NAME);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Name
   */
  public void setName(String value) {
    setAttributeInternal(NAME, value);
  }

  /**
   * 
   *  Gets the attribute value for Sex, using the alias name Sex
   */
  public String getSex() {
    return (String)getAttributeInternal(SEX);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Sex
   */
  public void setSex(String value) {
    setAttributeInternal(SEX, value);
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case ID:
            return getId();
        case NAME:
            return getName();
        case SEX:
            return getSex();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case ID:
            setId((Number)value);
            return;
        case NAME:
            setName((String)value);
            return;
        case SEX:
            setSex((String)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }


  public void doPersonThing() {
    System.out.println("PersonImpl: doPersonThing");
  }

    /**Creates a Key object based on given key constituents
     */
    public static Key createPrimaryKey(Number id) {
        return new Key(new Object[]{id});
    }
}
