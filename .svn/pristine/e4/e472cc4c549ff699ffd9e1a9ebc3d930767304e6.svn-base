package demo.model;
import demo.model.common.HRModule;
import demo.model.queries.EmployeesImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.RowIterator;
import oracle.jbo.Session;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HRModuleImpl extends ApplicationModuleImpl implements HRModule {
  /**This is the default constructor (do not remove)
   */
  public HRModuleImpl() {
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args) {
    launchTester("demo.model", /* package name */
      "HRModuleLocal" /* Configuration Name */);
  }

  /**Container's getter for Departments
   */
  public ViewObjectImpl getDepartments() {
    return (ViewObjectImpl)findViewObject("Departments");
  }
  
  /** ===vv=== PUBLIC METHODS ON APP MODULE CLIENT INTERFACE ===vv=== **/

  /**
   * Returns a RowIterator for a filtered picklist containing
   * rows with attributes named "Value", "Label", and "Filter".
   * Only the "Value" and "Label" are used by the client to build
   * the pick list. The value of the "Filter" attribute is used to
   * return the subsetted list that matches the current department number
   * passed in as an argument.
   * @param n Department Number for which the picklist should be
   * @return RowIterator of (Value,Label)
   */
  public RowIterator lovEmpsForDepartment(Number departmentId) {
    return getFilteredPickList("EmployeesList", departmentId);
  }
  /**
   * Force the LOV view object to refresh its query from the database,
   * but then leave the view object in scan view-rows mode so that subsequent
   * filtering is done in memory.
   */
  public void refreshLovEmps() {
    refreshDataAndLeaveInViewRowScanMode("EmployeesList");
  }
  /**
   * Same as above but using an instance of a read-only view object
   * that it not based on any entity object.
   *
   * @param departmentId Department Id
   * @return RowIterator of matches or null of nothing matches
   */
  public RowIterator lovEmpsForDepartmentReadOnly(Number departmentId) {
    return getFilteredPickList("ReadOnlyEmployeesList", departmentId);
  }
  /**
   * Same as above but using an instance of a read-only view object
   * that it not based on any entity object.
   */
  public void refreshLovEmpsReadOnly() {
    refreshDataAndLeaveInViewRowScanMode("ReadOnlyEmployeesList");
  }

  /** ===^^=== PUBLIC METHODS ON APP MODULE CLIENT INTERFACE ===^^=== **/


  protected void refreshDataAndLeaveInViewRowScanMode(String voInstanceName) {
    ViewObject vo = findViewObject(voInstanceName);
    vo.setQueryMode(ViewObject.QUERY_MODE_SCAN_DATABASE_TABLES);    
    vo.executeQuery();
    /* 
     * Force all rows to be retrieved into the view row cache
     */
    vo.last();
    vo.setQueryMode(ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
  }
  protected ViewObject getLabelListVOInstance(String voInstanceName) {
    ViewObject vo = findViewObject(voInstanceName);
    if (!vo.isExecuted()) {
      refreshDataAndLeaveInViewRowScanMode(voInstanceName);
    }
    return vo;
  }
  /**
   * Returns a RowIterator for an in-memory filtered list of employees
   * names and id's for the current department number passed in. Assumes
   * the field on which you want to filter is named "Filter".
   * @param voInstanceName View Object instance name in the data model
   * @param filterValue value for the 'Filter' attribute to filter on
   * @return RowIterator of matches, or null if no matching rows.
   */
  protected RowIterator getFilteredPickList(String voInstanceName,
                                            Object filterValue) {
    ViewObject vo = getLabelListVOInstance(voInstanceName);
    ViewCriteria vc = vo.createViewCriteria();
    ViewCriteriaRow vcr = vc.createViewCriteriaRow();
    vcr.setAttribute("Filter",filterValue);
    vc.add(vcr);
    vc.setCriteriaMode(ViewCriteria.CRITERIA_MODE_CACHE);
    return vo.findByViewCriteria(vc,-1,ViewObject.QUERY_MODE_SCAN_VIEW_ROWS);
  }

// Uncomment this to generate database trace file to study the SQL statements
// and number of times they get executed.
//
//  protected void prepareSession(Session session) {
//    super.prepareSession(session);
//    getDBTransaction().executeCommand("ALTER SESSION SET SQL_TRACE TRUE");
//  }

  /**Container's getter for Employees
   */
  public EmployeesImpl getEmployees() {
    return (EmployeesImpl)findViewObject("Employees");
  }

  /**Container's getter for EmployeesList
   */
  public ViewObjectImpl getEmployeesList() {
    return (ViewObjectImpl)findViewObject("EmployeesList");
  }

  /**Container's getter for ReadOnlyEmployeesList
   */
  public ViewObjectImpl getReadOnlyEmployeesList() {
    return (ViewObjectImpl)findViewObject("ReadOnlyEmployeesList");
  }
}
