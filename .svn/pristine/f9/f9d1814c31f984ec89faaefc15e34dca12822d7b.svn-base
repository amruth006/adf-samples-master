/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package test.model;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 24 11:42:50 CET 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeptWithBooleanImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;
    private static final String TRUE_VALUE = "T";
    private static final String FALSE_VALUE = "F";

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Deptno {
            public Object get(DeptWithBooleanImpl obj) {
                return obj.getDeptno();
            }

            public void put(DeptWithBooleanImpl obj, Object value) {
                obj.setDeptno((Number)value);
            }
        },
        Dname {
            public Object get(DeptWithBooleanImpl obj) {
                return obj.getDname();
            }

            public void put(DeptWithBooleanImpl obj, Object value) {
                obj.setDname((String)value);
            }
        },
        Loc {
            public Object get(DeptWithBooleanImpl obj) {
                return obj.getLoc();
            }

            public void put(DeptWithBooleanImpl obj, Object value) {
                obj.setLoc((String)value);
            }
        },
        Selected {
            public Object get(DeptWithBooleanImpl obj) {
                return obj.getSelected();
            }

            public void put(DeptWithBooleanImpl obj, Object value) {
                obj.setSelected((String)value);
            }
        },
        SelectedBoolean {
            public Object get(DeptWithBooleanImpl obj) {
                return obj.getSelectedBoolean();
            }

            public void put(DeptWithBooleanImpl obj, Object value) {
                obj.setSelectedBoolean((Boolean)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DeptWithBooleanImpl object);

        public abstract void put(DeptWithBooleanImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DEPTNO = AttributesEnum.Deptno.index();
    public static final int DNAME = AttributesEnum.Dname.index();
    public static final int LOC = AttributesEnum.Loc.index();
    public static final int SELECTED = AttributesEnum.Selected.index();
    public static final int SELECTEDBOOLEAN =
        AttributesEnum.SelectedBoolean.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DeptWithBooleanImpl() {
    }

    /**
     * Gets the attribute value for Deptno, using the alias name Deptno.
     * @return the Deptno
     */
    public Number getDeptno() {
        return (Number)getAttributeInternal(DEPTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Deptno.
     * @param value value to set the Deptno
     */
    public void setDeptno(Number value) {
        setAttributeInternal(DEPTNO, value);
    }

    /**
     * Gets the attribute value for Dname, using the alias name Dname.
     * @return the Dname
     */
    public String getDname() {
        return (String)getAttributeInternal(DNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dname.
     * @param value value to set the Dname
     */
    public void setDname(String value) {
        setAttributeInternal(DNAME, value);
    }

    /**
     * Gets the attribute value for Loc, using the alias name Loc.
     * @return the Loc
     */
    public String getLoc() {
        return (String)getAttributeInternal(LOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for Loc.
     * @param value value to set the Loc
     */
    public void setLoc(String value) {
        setAttributeInternal(LOC, value);
    }

    /**
     * Gets the attribute value for Selected, using the alias name Selected.
     * @return the Selected
     */
    public String getSelected() {
        return (String)getAttributeInternal(SELECTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Selected.
     * @param value value to set the Selected
     */
    public void setSelected(String value) {
        setAttributeInternal(SELECTED, value);
    }

    /**
     * Gets the attribute value for SelectedBoolean, using the alias name SelectedBoolean.
     * @return the SelectedBoolean
     */
    public Boolean getSelectedBoolean() {
        //return (Boolean)getAttributeInternal(SELECTEDBOOLEAN);
        if (TRUE_VALUE.equals(getSelected())) {
            return Boolean.TRUE;
        } else if (FALSE_VALUE.equals(getSelected())) {
            return Boolean.FALSE;
        }

        return null;

    }

    /**
     * Sets <code>value</code> as the attribute value for SelectedBoolean.
     * @param value value to set the SelectedBoolean
     */
    public void setSelectedBoolean(Boolean value) {
        //setAttributeInternal(SELECTEDBOOLEAN, value);
        if (Boolean.TRUE.equals(value)) {
            setSelected(TRUE_VALUE);
        } else if (Boolean.FALSE.equals(value)) {
            setSelected(FALSE_VALUE);
        } else {
            setSelected(null);
        }
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param deptno key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number deptno) {
        return new Key(new Object[] { deptno });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("test.model.DeptWithBoolean");
        }
        return mDefinitionObject;
    }
}
