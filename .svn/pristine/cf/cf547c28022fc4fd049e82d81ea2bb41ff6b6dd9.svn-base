/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package xml2000demo;
import java.util.*;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------
// ---    File generated by Oracle Business Components for Java.
// ---------------------------------------------------------------
import oracle.jbo.server.*;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.util.*;
public class DeptImpl extends EntityImpl {
  public static final int DEPTNO = 0;
  public static final int DNAME = 1;
  public static final int LOC = 2;
  public static final int EMP = 3;
  private static EntityDefImpl mDefinitionObject;

  /**
   * This is the default constructor (do not remove)
   */
  public DeptImpl() {}

  /**
   *
   *  Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject() {
    if (mDefinitionObject == null) {
      mDefinitionObject = (EntityDefImpl) EntityDefImpl.findDefObject(
          "xml2000demo.Dept");
    }
    return mDefinitionObject;
  }
  public boolean validateSalaryCap() {
    float deptTotal = sumOfEmpsInDepartment();
    if (deptTotal > 11000) {
      return false;
    }
    return true;
  }
  /**
   * Gets the attribute value for Deptno, using the alias name Deptno
   */
  public Number getDeptno() {
    return (Number) getAttributeInternal(DEPTNO);
  }
  /**
   * Sets <code>value</code> as the attribute value for Deptno
   */
  public void setDeptno(Number value) {
    setAttributeInternal(DEPTNO, value);
  }
  /**
   * Gets the attribute value for Dname, using the alias name Dname
   */
  public String getDname() {
    return (String) getAttributeInternal(DNAME);
  }
  /**
   * Sets <code>value</code> as the attribute value for Dname
   */
  public void setDname(String value) {
    setAttributeInternal(DNAME, value);
  }
  /**
   * Gets the attribute value for Loc, using the alias name Loc
   */
  public String getLoc() {
    return (String) getAttributeInternal(LOC);
  }
  /**
   * Sets <code>value</code> as the attribute value for Loc
   */
  public void setLoc(String value) {
    setAttributeInternal(LOC, value);
  }
  /**
   * Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getEmp() {
    return (RowIterator) getAttributeInternal(EMP);
  }
  private float sumOfEmpsInDepartment() {
    RowSetIterator r = (RowSetIterator)getEmp();
    float total = 0;

    // Why do I get 4 rows here when I'm inserting two?
    while (r.hasNext()) {
      Number curSal = ((EmpImpl) r.next()).getSal();
      total += ((curSal != null) ? curSal.floatValue() : 0);
    }
    r.getRowSet().closeRowSet();
    return total;
  }
  //  Generated method. Do not modify.
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef)
    throws Exception {
    switch (index) {
    case DEPTNO:
      return getDeptno();
    case DNAME:
      return getDname();
    case LOC:
      return getLoc();
    case EMP:
      return getEmp();
    default:
      return super.getAttrInvokeAccessor(index, attrDef);
    }
  }
  //  Generated method. Do not modify.
  protected void setAttrInvokeAccessor(int index, Object value,
    AttributeDefImpl attrDef) throws Exception {
    switch (index) {
    case DEPTNO:
      setDeptno((Number) value);
      return;
    case DNAME:
      setDname((String) value);
      return;
    case LOC:
      setLoc((String) value);
      return;
    default:
      super.setAttrInvokeAccessor(index, value, attrDef);
      return;
    }
  }
  /**
   *
   *  Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(Number deptno) {
    return new Key(new Object[] { deptno });
  }
}
