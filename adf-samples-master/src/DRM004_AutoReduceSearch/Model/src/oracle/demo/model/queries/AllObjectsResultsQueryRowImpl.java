/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package oracle.demo.model.queries;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 11 14:28:56 BST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AllObjectsResultsQueryRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ObjectName {
            public Object get(AllObjectsResultsQueryRowImpl obj) {
                return obj.getObjectName();
            }

            public void put(AllObjectsResultsQueryRowImpl obj, Object value) {
                obj.setObjectName((String)value);
            }
        }
        ,
        ObjectId {
            public Object get(AllObjectsResultsQueryRowImpl obj) {
                return obj.getObjectId();
            }

            public void put(AllObjectsResultsQueryRowImpl obj, Object value) {
                obj.setObjectId((Number)value);
            }
        }
        ,
        ObjectType {
            public Object get(AllObjectsResultsQueryRowImpl obj) {
                return obj.getObjectType();
            }

            public void put(AllObjectsResultsQueryRowImpl obj, Object value) {
                obj.setObjectType((String)value);
            }
        }
        ,
        Owner {
            public Object get(AllObjectsResultsQueryRowImpl obj) {
                return obj.getOwner();
            }

            public void put(AllObjectsResultsQueryRowImpl obj, Object value) {
                obj.setOwner((String)value);
            }
        }
        ,
        Status {
            public Object get(AllObjectsResultsQueryRowImpl obj) {
                return obj.getStatus();
            }

            public void put(AllObjectsResultsQueryRowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AllObjectsResultsQueryRowImpl object);

        public abstract void put(AllObjectsResultsQueryRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int OBJECTNAME = AttributesEnum.ObjectName.index();
    public static final int OBJECTID = AttributesEnum.ObjectId.index();
    public static final int OBJECTTYPE = AttributesEnum.ObjectType.index();
    public static final int OWNER = AttributesEnum.Owner.index();
    public static final int STATUS = AttributesEnum.Status.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AllObjectsResultsQueryRowImpl() {
    }

    /**
     * Gets AllObjects entity object.
     * @return the AllObjects
     */
    public EntityImpl getAllObjects() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for OBJECT_NAME using the alias name ObjectName.
     * @return the OBJECT_NAME
     */
    public String getObjectName() {
        return (String) getAttributeInternal(OBJECTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for OBJECT_NAME using the alias name ObjectName.
     * @param value value to set the OBJECT_NAME
     */
    public void setObjectName(String value) {
        setAttributeInternal(OBJECTNAME, value);
    }

    /**
     * Gets the attribute value for OBJECT_ID using the alias name ObjectId.
     * @return the OBJECT_ID
     */
    public Number getObjectId() {
        return (Number) getAttributeInternal(OBJECTID);
    }

    /**
     * Sets <code>value</code> as attribute value for OBJECT_ID using the alias name ObjectId.
     * @param value value to set the OBJECT_ID
     */
    public void setObjectId(Number value) {
        setAttributeInternal(OBJECTID, value);
    }

    /**
     * Gets the attribute value for OBJECT_TYPE using the alias name ObjectType.
     * @return the OBJECT_TYPE
     */
    public String getObjectType() {
        return (String) getAttributeInternal(OBJECTTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for OBJECT_TYPE using the alias name ObjectType.
     * @param value value to set the OBJECT_TYPE
     */
    public void setObjectType(String value) {
        setAttributeInternal(OBJECTTYPE, value);
    }

    /**
     * Gets the attribute value for OWNER using the alias name Owner.
     * @return the OWNER
     */
    public String getOwner() {
        return (String) getAttributeInternal(OWNER);
    }

    /**
     * Sets <code>value</code> as attribute value for OWNER using the alias name Owner.
     * @param value value to set the OWNER
     */
    public void setOwner(String value) {
        setAttributeInternal(OWNER, value);
    }

    /**
     * Gets the attribute value for STATUS using the alias name Status.
     * @return the STATUS
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS using the alias name Status.
     * @param value value to set the STATUS
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
