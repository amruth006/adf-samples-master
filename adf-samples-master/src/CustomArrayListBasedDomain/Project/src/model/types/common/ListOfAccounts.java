/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package model.types.common;

import java.io.PrintWriter;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import model.types.Account;

import oracle.jbo.Transaction;
import oracle.jbo.domain.DomainInterface;
import oracle.jbo.domain.DomainOwnerInterface;
import oracle.jbo.domain.XMLDomainFactory;
import oracle.jbo.domain.XMLDomainReaderFactory;
import oracle.jbo.domain.XMLDomainWriter;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ListOfAccounts implements XMLDomainWriter,DomainInterface, Serializable {

   private ArrayList<Account> mData = new ArrayList<Account>();

    public void add(Account acc) {
        mData.add(acc);
    }

    public void remove(Account acc) {
        mData.remove(acc);
    }

    public List<Account> toList() {
        return (List<Account>)mData.clone();
    }

    public Node getSerializedDomainXML(Document xmlDoc) {
        return getXMLContentNode(xmlDoc);
    }



    private static Element elementForAccount(Account acc, Document xmlDoc) {
        Element e = xmlDoc.createElement("Account");
        e.setAttribute("Id", acc.getAccountid());
        e.setAttribute("Name", acc.getAccountname());
        return e;
    }


    public Node getXMLContentNode(Document xmlDoc) {
        Element e = xmlDoc.createElement("AccountList");
        for (Account acc: mData) {
            e.appendChild(elementForAccount(acc, xmlDoc));
        }
        return e;
    }

    public String printXMLDefinition(Hashtable allDefs, PrintWriter pw, 
                                     boolean bContainees) {
        throw new RuntimeException("Unsupported");
    }

    public ListOfAccounts() {
        mData = new ArrayList<Account>();
    }
    public ListOfAccounts(Account[] accounts) {
        this();
        if (accounts != null) {
            for (Account acc: accounts) {
                add(acc);
            }
        }
    }
    public ListOfAccounts(List<Account> accounts) {
        if (accounts == null) {
            throw new NullPointerException();
        }
        mData = new ArrayList<Account>();
        for (Account acc: accounts) {
            add(acc);
        }
    }
    

    public Object getData() {
        return mData;
    }

    /**<b>Internal:</b> <em>Applications should not use this method.</em>
     */
    public void setContext(DomainOwnerInterface owner, Transaction trans, 
                           Object obj) {
    }

    /**Implements domain validation logic and throws a JboException on error.
     */
    protected void validate() {
        //  ### Implement custom domain validation logic here. ### 
    }

    public String toString() {
        if (mData != null) {
            return mData.toString();
        }
        return "<null>";
    }

    public boolean equals(Object obj) {
        if (obj instanceof DomainInterface) {
            if (mData != null) {
                return mData.equals(((DomainInterface)obj).getData());
            }
            return ((DomainInterface)obj).getData() == null;
        }
        return false;
    }
    public static XMLDomainReaderFactory getXMLDomainFactory(Class attrClass) {
        class facClass implements XMLDomainReaderFactory, XMLDomainFactory  {
            public Object createDomainFromSerializedXML(Element element) {
                ListOfAccounts loa = new ListOfAccounts();
                NodeList nl = element.getElementsByTagName("Account");
                if (nl != null) {
                    for (int i = 0; i < nl.getLength(); i++) {
                        loa.add(accountForElement((Element)nl.item(i)));
                    }
                    return loa;
                }
                return null;
            }
            private Account accountForElement(Element e) {
                Account acc = new Account();
                acc.setAccountid(e.getAttribute("Id"));
                acc.setAccountname(e.getAttribute("Name"));
                return acc;
            }

            public DomainInterface createDomainFromXMLElement(Element element) {
                return (DomainInterface)createDomainFromSerializedXML(element);
            }
        }
        return new facClass();
    }    
}
