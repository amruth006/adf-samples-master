/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package test.model;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CitiesImpl extends EntityImpl {
  public static final int CITYID = 0;
  public static final int NAME = 1;
  public static final int REGIONID = 2;
  public static final int COUNTRYID = 3;
  public static final int NOTES = 4;
  public static final int REGIONS = 5;
  public static final int COUNTRIES = 6;
  private static EntityDefImpl mDefinitionObject;

  /**This is the default constructor (do not remove)
   */
  public CitiesImpl() {
  }

  /**Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject() {
    if (mDefinitionObject == null) {
      mDefinitionObject = (EntityDefImpl)EntityDefImpl.findDefObject("test.model.Cities");
    }
    return mDefinitionObject;
  }
  protected void create(AttributeList nameValuePair) {
    super.create(nameValuePair);
    setCityId((new SequenceImpl("CITIES_SEQ",getDBTransaction())).getSequenceNumber());
  }

  /**Gets the attribute value for CityId, using the alias name CityId
   */
  public Number getCityId() {
    return (Number)getAttributeInternal(CITYID);
  }

  /**Sets <code>value</code> as the attribute value for CityId
   */
  public void setCityId(Number value) {
    setAttributeInternal(CITYID, value);
  }

  /**Gets the attribute value for Name, using the alias name Name
   */
  public String getName() {
    return (String)getAttributeInternal(NAME);
  }

  /**Sets <code>value</code> as the attribute value for Name
   */
  public void setName(String value) {
    setAttributeInternal(NAME, value);
  }

  /**Gets the attribute value for RegionId, using the alias name RegionId
   */
  public Number getRegionId() {
    return (Number)getAttributeInternal(REGIONID);
  }

  /**Sets <code>value</code> as the attribute value for RegionId
   */
  public void setRegionId(Number value) {
    setAttributeInternal(REGIONID, value);
  }

  /**Gets the attribute value for CountryId, using the alias name CountryId
   */
  public String getCountryId() {
    return (String)getAttributeInternal(COUNTRYID);
  }

  /**Sets <code>value</code> as the attribute value for CountryId
   */
  public void setCountryId(String value) {
    setAttributeInternal(COUNTRYID, value);
  }

  /**getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, 
                                         AttributeDefImpl attrDef) throws Exception {
    switch (index) {
    case CITYID:
      return getCityId();
    case NAME:
      return getName();
    case REGIONID:
      return getRegionId();
    case COUNTRYID:
      return getCountryId();
    case NOTES:
      return getNotes();
    case COUNTRIES:
      return getCountries();
    case REGIONS:
      return getRegions();
    default:
      return super.getAttrInvokeAccessor(index, attrDef);
    }
  }

  /**setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, 
                                       AttributeDefImpl attrDef) throws Exception {
    switch (index) {
    case CITYID:
      setCityId((Number)value);
      return;
    case NAME:
      setName((String)value);
      return;
    case REGIONID:
      setRegionId((Number)value);
      return;
    case COUNTRYID:
      setCountryId((String)value);
      return;
    case NOTES:
      setNotes((String)value);
      return;
    default:
      super.setAttrInvokeAccessor(index, value, attrDef);
      return;
    }
  }

  /**Gets the associated entity RegionsImpl
   */
  public RegionsImpl getRegions() {
    return (RegionsImpl)getAttributeInternal(REGIONS);
  }

  /**Sets <code>value</code> as the associated entity RegionsImpl
   */
  public void setRegions(RegionsImpl value) {
    setAttributeInternal(REGIONS, value);
  }

  /**Gets the associated entity CountriesImpl
   */
  public CountriesImpl getCountries() {
    return (CountriesImpl)getAttributeInternal(COUNTRIES);
  }

  /**Sets <code>value</code> as the associated entity CountriesImpl
   */
  public void setCountries(CountriesImpl value) {
    setAttributeInternal(COUNTRIES, value);
  }

  /**Gets the attribute value for Notes, using the alias name Notes
   */
  public String getNotes() {
    return (String)getAttributeInternal(NOTES);
  }

  /**Sets <code>value</code> as the attribute value for Notes
   */
  public void setNotes(String value) {
    setAttributeInternal(NOTES, value);
  }

  /**Creates a Key object based on given key constituents
   */
  public static Key createPrimaryKey(Number cityId) {
    return new Key(new Object[]{cityId});
  }
}
