/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package test.model.entities;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.TransactionEvent;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---------------------------------------------------------------------

public class DeptImpl extends EntityImpl {
    public static final int DEPTNO = 0;
    public static final int DNAME = 1;
    public static final int LOC = 2;
    public static final int EMP = 3;


    private static EntityDefImpl mDefinitionObject;

  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public DeptImpl() {
  }


    /**Retrieves the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = (EntityDefImpl)EntityDefImpl.findDefObject("test.model.entities.Dept");
        }
        return mDefinitionObject;
    }

    /**
     * 
     *  Gets the attribute value for Deptno, using the alias name Deptno
     */
    public DBSequence getDeptno() {
    return (DBSequence)getAttributeInternal(DEPTNO);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Deptno
   */
  public void setDeptno(DBSequence value) {
    setAttributeInternal(DEPTNO, value);
  }

  /**
   * 
   *  Gets the attribute value for Dname, using the alias name Dname
   */
  public String getDname() {
    return (String)getAttributeInternal(DNAME);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Dname
   */
  public void setDname(String value) {
    setAttributeInternal(DNAME, value);
  }

  /**
   * 
   *  Gets the attribute value for Loc, using the alias name Loc
   */
  public String getLoc() {
    return (String)getAttributeInternal(LOC);
  }

  /**
   * 
   *  Sets <code>value</code> as the attribute value for Loc
   */
  public void setLoc(String value) {
    setAttributeInternal(LOC, value);
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case DEPTNO:
            return getDeptno();
        case DNAME:
            return getDname();
        case LOC:
            return getLoc();
        case EMP:
            return getEmp();
        default:
            return super.getAttrInvokeAccessor(index, attrDef);
        }
    }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        switch (index) {
        case DEPTNO:
            setDeptno((DBSequence)value);
            return;
        case DNAME:
            setDname((String)value);
            return;
        case LOC:
            setLoc((String)value);
            return;
        default:
            super.setAttrInvokeAccessor(index, value, attrDef);
            return;
        }
    }


  /**
   * 
   *  Gets the associated entity oracle.jbo.RowIterator
   */
  public RowIterator getEmp() {
    return (RowIterator)getAttributeInternal(EMP);
  }


    RowIterator empsBeforePostChange = null;

  /*
   * This code is required to insure that after a new Dept entity
   * instance is posted that any of its emp instances has their
   * foreign key attribute updated to reflect the new db-assigned
   * sequence-generated primary key.
   * 
   * It would not be necessary if the Dept->Emp association
   * were marked as a composition, in which case the framework
   * takes care of this foreign-key refresh automatically for you.
   */  
  protected void refreshFKInNewContainees() {
    super.refreshFKInNewContainees();
    if (empsBeforePostChange != null) {
      Number dbAssignedDeptno = getDeptno().getSequenceNumber();
      while (empsBeforePostChange.hasNext()) {
        EmpImpl emp = (EmpImpl)empsBeforePostChange.next();
        emp.setDeptno(dbAssignedDeptno);
      }
    }
  }

  public void postChanges(TransactionEvent e) {
    empsBeforePostChange = getEmp();
    super.postChanges(e);
  }


    /**Creates a Key object based on given key constituents
     */
    public static Key createPrimaryKey(DBSequence deptno) {
        return new Key(new Object[]{deptno});
    }
}
