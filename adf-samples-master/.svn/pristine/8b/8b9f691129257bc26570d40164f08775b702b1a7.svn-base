/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package demo.model.dataaccess;
import demo.model.businessobjects.DeptDefImpl;
import demo.model.businessobjects.DeptImpl;
import oracle.jbo.ViewObject;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Date;
//  ---------------------------------------------------------------------
//  ---    File generated by Oracle ADF Business Components Design Time.
//  ---    Custom code may be added to this class.
//  ---    Warning: Do not modify method signatures of generated methods.
//  ---------------------------------------------------------------------

public class EmpViewRowImpl extends ViewRowImpl  {


  public static final int EMPNO = 0;
  public static final int ENAME = 1;
  public static final int JOB = 2;
  public static final int MGR = 3;
  public static final int HIREDATE = 4;
  public static final int SAL = 5;
  public static final int COMM = 6;
  public static final int DNAME = 7;
  public static final int LOC = 8;
  public static final int DEPTNO = 9;
  public static final int REFERENCEDDEPTNO = 10;
  /**
   * 
   *  This is the default constructor (do not remove)
   */
  public EmpViewRowImpl() {
  }

  /**
   * 
   *  Gets Emp entity object.
   */
  public oracle.jbo.server.EntityImpl getEmp() {
    return (oracle.jbo.server.EntityImpl)getEntity(0);
  }

  /**
   * 
   *  Gets Dept entity object.
   */
  public DeptImpl getDept() {
    return (DeptImpl)getEntity(1);
  }

  /**
   * 
   *  Gets the attribute value for EMPNO using the alias name Empno
   */
  public Number getEmpno() {
    return (Number)getAttributeInternal(EMPNO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for EMPNO using the alias name Empno
   */
  public void setEmpno(Number value) {
    setAttributeInternal(EMPNO, value);
  }

  /**
   * 
   *  Gets the attribute value for ENAME using the alias name Ename
   */
  public String getEname() {
    return (String)getAttributeInternal(ENAME);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for ENAME using the alias name Ename
   */
  public void setEname(String value) {
    setAttributeInternal(ENAME, value);
  }

  /**
   * 
   *  Gets the attribute value for JOB using the alias name Job
   */
  public String getJob() {
    return (String)getAttributeInternal(JOB);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for JOB using the alias name Job
   */
  public void setJob(String value) {
    setAttributeInternal(JOB, value);
  }

  /**
   * 
   *  Gets the attribute value for MGR using the alias name Mgr
   */
  public Number getMgr() {
    return (Number)getAttributeInternal(MGR);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for MGR using the alias name Mgr
   */
  public void setMgr(Number value) {
    setAttributeInternal(MGR, value);
  }

  /**
   * 
   *  Gets the attribute value for HIREDATE using the alias name Hiredate
   */
  public Date getHiredate() {
    return (Date)getAttributeInternal(HIREDATE);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for HIREDATE using the alias name Hiredate
   */
  public void setHiredate(Date value) {
    setAttributeInternal(HIREDATE, value);
  }

  /**
   * 
   *  Gets the attribute value for SAL using the alias name Sal
   */
  public Number getSal() {
    return (Number)getAttributeInternal(SAL);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for SAL using the alias name Sal
   */
  public void setSal(Number value) {
    setAttributeInternal(SAL, value);
  }

  /**
   * 
   *  Gets the attribute value for COMM using the alias name Comm
   */
  public Number getComm() {
    return (Number)getAttributeInternal(COMM);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for COMM using the alias name Comm
   */
  public void setComm(Number value) {
    setAttributeInternal(COMM, value);
  }



  /**
   * 
   *  Gets the attribute value for DNAME using the alias name Dname
   */
  public String getDname() {
    return (String)getAttributeInternal(DNAME);
  }




  /**
   * 
   *  getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
    switch (index)
      {
      case EMPNO:
        return getEmpno();
      case ENAME:
        return getEname();
      case JOB:
        return getJob();
      case MGR:
        return getMgr();
      case HIREDATE:
        return getHiredate();
      case SAL:
        return getSal();
      case COMM:
        return getComm();
      case DNAME:
        return getDname();
      case LOC:
        return getLoc();
      case DEPTNO:
        return getDeptno();
      case REFERENCEDDEPTNO:
        return getReferencedDeptno();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }

  /**
   * 
   *  setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
    switch (index)
      {
      case EMPNO:
        setEmpno((Number)value);
        return;
      case ENAME:
        setEname((String)value);
        return;
      case JOB:
        setJob((String)value);
        return;
      case MGR:
        setMgr((Number)value);
        return;
      case HIREDATE:
        setHiredate((Date)value);
        return;
      case SAL:
        setSal((Number)value);
        return;
      case COMM:
        setComm((Number)value);
        return;
      case DNAME:
        setDname((String)value);
        return;
      case LOC:
        setLoc((String)value);
        return;
      case DEPTNO:
        setDeptno((Number)value);
        return;
      case REFERENCEDDEPTNO:
        setReferencedDeptno((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }

/*==================== User-Modified Code Below this Line ===============*/

  /**
   * Force the referenced "Dname" attribute to be updateable.
   * @return true if attribute is updateable.
   * @param index attribute index
   */
  public boolean isAttributeUpdateable(int index) {
    if (index == DNAME) {
      return true;
    }
    return super.isAttributeUpdateable(index);
  }
  /**
   * Overridden framework attribute setter method.
   * 
   * Have the setDname() lookup the Deptno by Dname (using a custom lookup
   * method I've provided for Dept entities on a custom Dept Definition class,
   * DeptDefImpl.
   * 
   * Since the Dept entity usage is included in this view object as
   * a "reference", when we set the Deptno value this will cause the normal
   * ADF BC reference mechanism to associate this view row with the correct
   * Dept entity part and show all related reference information.
   */
  public void setDname(String value) {
    DeptDefImpl deptDef = (DeptDefImpl)getDept().getDefinitionObject();
    DBTransaction txn   = (DBTransaction)getApplicationModule().getTransaction();
    DeptImpl deptFound  = deptDef.lookupDeptByDname(value,txn);
    setAttributeInternal(DEPTNO, deptFound != null ? deptFound.getDeptno() : null);
    // Commented out the line of code below which is what
    // the ADF BC design time generated for the Dname attribute setter.
    // setAttributeInternal(DNAME, value);
  }  

  /**
   * 
   *  Gets the attribute value for LOC using the alias name Loc
   */
  public String getLoc() {
    return (String)getAttributeInternal(LOC);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for LOC using the alias name Loc
   */
  public void setLoc(String value) {
    setAttributeInternal(LOC, value);
  }

  /**
   * 
   *  Gets the attribute value for DEPTNO using the alias name Deptno
   */
  public Number getDeptno() {
    return (Number)getAttributeInternal(DEPTNO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for DEPTNO using the alias name Deptno
   */
  public void setDeptno(Number value) {
    setAttributeInternal(DEPTNO, value);
  }

  /**
   * 
   *  Gets the attribute value for DEPTNO using the alias name ReferencedDeptno
   */
  public Number getReferencedDeptno() {
    return (Number)getAttributeInternal(REFERENCEDDEPTNO);
  }

  /**
   * 
   *  Sets <code>value</code> as attribute value for DEPTNO using the alias name ReferencedDeptno
   */
  public void setReferencedDeptno(Number value) {
    setAttributeInternal(REFERENCEDDEPTNO, value);
  }
}
