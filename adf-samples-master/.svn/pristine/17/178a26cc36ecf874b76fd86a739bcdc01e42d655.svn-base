/* Copyright 2010, 2017, Oracle and/or its affiliates. All rights reserved. */
package test.model.queries;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import test.model.entities.ExpertiseAreaImpl;
import test.model.entities.ProductImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProductExpertiseAreasRowImpl extends ViewRowImpl {
  public static final int PRODID = 0;
  public static final int NAME = 1;
  public static final int EXPERTISELEVEL = 2;
  public static final int PRODID1 = 3;
  public static final int USERID = 4;
  public static final int HASEXPERTISE = 5;

  /**This is the default constructor (do not remove)
   */
  public ProductExpertiseAreasRowImpl() {
  }

  /**Gets Product entity object.
   */
  public ProductImpl getProduct() {
    return (ProductImpl)getEntity(0);
  }

  /**Gets ExpertiseArea entity object.
   */
  public ExpertiseAreaImpl getExpertiseArea() {
    return (ExpertiseAreaImpl)getEntity(1);
  }

  /**Gets the attribute value for PROD_ID using the alias name ProdId
   */
  public Number getProdId() {
    return (Number) getAttributeInternal(PRODID);
  }

  /**Sets <code>value</code> as attribute value for PROD_ID using the alias name ProdId
   */
  public void setProdId(Number value) {
    setAttributeInternal(PRODID, value);
  }

  /**Gets the attribute value for NAME using the alias name Name
   */
  public String getName() {
    return (String) getAttributeInternal(NAME);
  }

  /**Sets <code>value</code> as attribute value for NAME using the alias name Name
   */
  public void setName(String value) {
    setAttributeInternal(NAME, value);
  }

  /**Gets the attribute value for EXPERTISE_LEVEL using the alias name ExpertiseLevel
   */
  public String getExpertiseLevel() {
    return (String) getAttributeInternal(EXPERTISELEVEL);
  }

  /**Sets <code>value</code> as attribute value for EXPERTISE_LEVEL using the alias name ExpertiseLevel
   */
  public void setExpertiseLevel(String value) {
    setAttributeInternal(EXPERTISELEVEL, value);
  }

  /**Gets the attribute value for PROD_ID using the alias name ProdId1
   */
  public Number getProdId1() {
    return (Number) getAttributeInternal(PRODID1);
  }

  /**Sets <code>value</code> as attribute value for PROD_ID using the alias name ProdId1
   */
  public void setProdId1(Number value) {
    setAttributeInternal(PRODID1, value);
  }

  /**Gets the attribute value for USER_ID using the alias name UserId
   */
  public Number getUserId() {
    return (Number) getAttributeInternal(USERID);
  }

  /**Sets <code>value</code> as attribute value for USER_ID using the alias name UserId
   */
  public void setUserId(Number value) {
    setAttributeInternal(USERID, value);
  }

  /*
   * HasExpertise is a transient Boolean view object attribute.
   * 
   * Return "true" if the ExpertiseArea entity in this row has a UserId
   * attribute that is null. Since UserId is one of the primary keys
   * of an ExpertiseArea entity object, its being null is a clue that the
   * current row is not referencing a matching ExpertiseArea entity.
   */
  public Boolean getHasExpertise() {
    return  getUserId() != null;
  }

  /*
   * HasExpertise is a transient Boolean view object attribute.
   * 
   * When someone toggles the value of "hasExpertise", we either create
   * a new ExpertiseArea entity instance with the correct (ProdId,UserId)
   * primary key, or we remove the currently-assocated ExpertiseArea
   * entity instance.
   */
  public void setHasExpertise(Boolean value) {
    /*
     * If we're being set true and we're currently false, then create
     * a new ExpertiseArea entity with the right userId and prodId and
     * associate it with the entity usage of the current view row.
     */
    if (value && !getHasExpertise()) {
      Number prodId = getProdId();
      /*
       * This view object has one user-defined parameter "Bind_UserId", so the
       * framework's view-link-related bind variable (also happens to be named
       * "Bind_UserId") will be in the 2nd-position in the RowFilter array
       * values, after this one user-defined parameter. In this case we cannot
       * simply access the current UserId from a reverse-direction view link
       * accessor attribute because our view link from Users to 
       * ProductExpertiseAreas has a customized View Link SQL clause, which
       * disables our ability to make it bidirectional.
       */
      Number userId = (Number)((ViewRowSetImpl)getRowSet()).getRowFilterValues()[1];
      Key expAreaForUserKey = ExpertiseAreaImpl.createPrimaryKey(prodId,userId);
      EntityDefImpl expAreaDef = ExpertiseAreaImpl.getDefinitionObject(); 
      DBTransaction dbTrans = ((ApplicationModuleImpl)getApplicationModule()).getDBTransaction();
      ExpertiseAreaImpl exp = (ExpertiseAreaImpl)expAreaDef.createInstance2(dbTrans,null);
      exp.setUserId(userId);
      exp.setProdId(prodId);
      exp.setExpertiseLevel("Qualified");
      /*
       *  Set this new EO instance to be the 2nd EO usage (zero-based!)
       *  in the current view row.
       */
      setEntity(1,exp);
      /*
       * Notify the companion view object that view attributes related to
       * this programmatically set entity row part have been changed so
       * the client can immediately update.
       */
      ((ProductExpertiseAreasImpl)getViewObject()).notifyUpdatedReferencedExpertiseAreaEntityForViewRow(this);
    }
    /*
     * Otherwise, if we're being set false and we're currently false
     * then remove the associated ExpertiseArea entity for this view row.
     */
    else if (!value && getHasExpertise()) {
      ExpertiseAreaImpl exp = getExpertiseArea();
      if (exp != null) {
        exp.remove();
      }
    };
  }

  /**getAttrInvokeAccessor: generated method. Do not modify.
   */
  protected Object getAttrInvokeAccessor(int index, 
                                         AttributeDefImpl attrDef) throws Exception {
    switch (index) {
    case PRODID:
      return getProdId();
    case NAME:
      return getName();
    case EXPERTISELEVEL:
      return getExpertiseLevel();
    case PRODID1:
      return getProdId1();
    case USERID:
      return getUserId();
    case HASEXPERTISE:
      return getHasExpertise();
    default:
      return super.getAttrInvokeAccessor(index, attrDef);
    }
  }

  /**setAttrInvokeAccessor: generated method. Do not modify.
   */
  protected void setAttrInvokeAccessor(int index, Object value, 
                                       AttributeDefImpl attrDef) throws Exception {
    switch (index) {
    case PRODID:
      setProdId((Number)value);
      return;
    case NAME:
      setName((String)value);
      return;
    case HASEXPERTISE:
      setHasExpertise((Boolean)value);
      return;
    default:
      super.setAttrInvokeAccessor(index, value, attrDef);
      return;
    }
  }
}
